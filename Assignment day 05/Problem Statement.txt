Problem Statement:
You inherited a piece of code that performs username validation for your company's website. The existing function works reasonably well, but it throws an exception when the username is too short. Upon review, you realize that nobody ever defined the exception.

The inherited code is provided for you in the locked section of your editor. Complete the code so that, when an exception is thrown, it prints Too short: n (where n is the length of the given username).

Input Format
The first line contains an integer, t, the number of test cases.
Each of the t subsequent lines describes a test case as a single username string, u.
Output Format
You are not responsible for directly printing anything to stdout. If your code is correct, the locked stub code in your editor will print either Valid (if the username is valid), Invalid (if the username is invalid), or Too short: n (where  n is the length of the too-short username) on a new line for each test case.

Platform Used:
HackerRank

Approach:
1.Define a Custom Exception Class:
--The class BadLengthException extends std::exception.
--It has a private member variable message (a string) to store the error message.
--The constructor takes an integer (likely representing an invalid length) and converts it to a string using to_string().
--The what() function overrides the base class's method to return the stored message.

2.Usage in a String Validation Function:
--This exception is typically thrown in a function that checks string length.
--If the length of the string is invalid (e.g., too short or too long), the exception is thrown with the length as the argument.

3.Catching and Handling the Exception:
--The function that calls the validation logic should wrap the call inside a try-catch block.
--If an exception is thrown, it should be caught and handled appropriately.
 