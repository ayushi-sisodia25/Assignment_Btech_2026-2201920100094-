Problem Statement:
In this challenge, you are required to handle error messages while working with small computational server that performs complex calculations.
It has a function that takes 2 large numbers as its input and returns a numeric result. Unfortunately, there are various exceptions that may occur during execution.

Complete the code in your editor so that it prints appropriate error messages, should anything go wrong. The expected behavior is defined as follows:

--If the compute function runs fine with the given arguments, then print the result of the function call.
--If it fails to allocate the memory that it needs, print Not enough memory.
--If any other standard C++ exception occurs, print Exception: S where  is the exception's error message.
--If any non-standard exception occurs, print Other Exception.

Input Format:
The first line contains an integer, T, the number of test cases.
Each of the T subsequent lines describes a test case as  space-separated integers,  and , respectively.

Output Format:
For each test case, print a single line containing whichever message described in the Problem Statement above is appropriate. After all messages have been printed, the locked stub code in your editor prints the server load.

Platform Used:
HackeRank

Approach:
Step 1: Understanding the Server Class
The class has a static variable load to keep track of the number of times compute(A, B) is called.

Step 2: Handling Edge Cases
--Memory Allocation Failure (std::bad_alloc)
-If A is too large, creating a vector of size A may result in a memory allocation failure.
-Solution: Catch bad_alloc and print "Not enough memory".

--Invalid Argument (std::invalid_argument)
-If A < 0, an exception is explicitly thrown.
Solution: Catch std::exception, print "Exception: A is negative".

--Divide by Zero (B == 0)
-If B == 0, an integer division error occurs, and an integer (0) is thrown.
Solution: Catch all other exceptions (catch (...)), print "Other Exception".

--Out-of-Range Access (std::out_of_range)
-The function accesses v.at(B), which can cause an out-of-range error if B >= A.
Solution: This is handled by catch (exception&).

Step 3: Implementing Exception Handling in main()